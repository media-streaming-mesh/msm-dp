// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: api/v1alpha1/msm_dp/msm_dp.proto

package msm_dp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsmDataPlaneClient is the client API for MsmDataPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsmDataPlaneClient interface {
	StreamAddDel(ctx context.Context, in *StreamData, opts ...grpc.CallOption) (*StreamResult, error)
}

type msmDataPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewMsmDataPlaneClient(cc grpc.ClientConnInterface) MsmDataPlaneClient {
	return &msmDataPlaneClient{cc}
}

func (c *msmDataPlaneClient) StreamAddDel(ctx context.Context, in *StreamData, opts ...grpc.CallOption) (*StreamResult, error) {
	out := new(StreamResult)
	err := c.cc.Invoke(ctx, "/msm_dp.MsmDataPlane/stream_add_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsmDataPlaneServer is the server API for MsmDataPlane service.
// All implementations must embed UnimplementedMsmDataPlaneServer
// for forward compatibility
type MsmDataPlaneServer interface {
	StreamAddDel(context.Context, *StreamData) (*StreamResult, error)
	mustEmbedUnimplementedMsmDataPlaneServer()
}

// UnimplementedMsmDataPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedMsmDataPlaneServer struct {
}

func (UnimplementedMsmDataPlaneServer) StreamAddDel(context.Context, *StreamData) (*StreamResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamAddDel not implemented")
}
func (UnimplementedMsmDataPlaneServer) mustEmbedUnimplementedMsmDataPlaneServer() {}

// UnsafeMsmDataPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsmDataPlaneServer will
// result in compilation errors.
type UnsafeMsmDataPlaneServer interface {
	mustEmbedUnimplementedMsmDataPlaneServer()
}

func RegisterMsmDataPlaneServer(s grpc.ServiceRegistrar, srv MsmDataPlaneServer) {
	s.RegisterService(&MsmDataPlane_ServiceDesc, srv)
}

func _MsmDataPlane_StreamAddDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsmDataPlaneServer).StreamAddDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msm_dp.MsmDataPlane/stream_add_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsmDataPlaneServer).StreamAddDel(ctx, req.(*StreamData))
	}
	return interceptor(ctx, in, info, handler)
}

// MsmDataPlane_ServiceDesc is the grpc.ServiceDesc for MsmDataPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsmDataPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msm_dp.MsmDataPlane",
	HandlerType: (*MsmDataPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stream_add_del",
			Handler:    _MsmDataPlane_StreamAddDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/msm_dp/msm_dp.proto",
}
